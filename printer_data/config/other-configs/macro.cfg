
#Cura start g-code
#SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={material_bed_temperature_layer_0}
#SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={material_print_temperature_layer_0}
#START_PRINT


[gcode_macro START_PRINT]          # START_PRINT 
gcode:
    G28 ; home all axes
    BED_MESH_CLEAR
    PRTOUCH_PROBE_ZOFFSET APPLY_Z_ADJUST=1 ;CLEAR_NOZZLE=1
    M106 S255
    M104 S{params.EXTRUDER_TEMP} ; set extruder temp
    M190 S{params.BED_TEMP} ; set bed temp and wait
    M109 S{params.EXTRUDER_TEMP} ; set extruder temp and wait
    G92 E0 ; Reset Extruder distance to 0
    G1 E-3 ; Retracts filament to prevent blobs during probing
    G92 E0 ; Reset Extruder distance to 0
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE=KAMP
    G4 S5; wait for heaters to recover
    M106 S0
    LINE_PURGE

[gcode_macro END_PRINT]
gcode:
    G91 ; relative positioning
    G1 E-8 F600 ; Retracts filament to mitigate blobs on next print
    G1 Z5 F1200 ; lift z up
    G90 ; absolute positioning
    G1 X0 Y200 F1800 ; bring nozzle left and bed forward
    M106 S0 ; turn off cooling fan
    M104 S0 ; turn off extruder
    M140 S0 ; turn off bed
    M84 ; disable motors
    M117 PRINT COMPLETE!


[gcode_macro Z_TOUCH_OFFSET_CHECK] 
gcode:
    M118 BEGIN PRTOUCH COMMAND
    PRTOUCH_PROBE_ZOFFSET
    M118 PRTOUCH DONE, LOADING MESH


[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state



############################################################################################################
############################################################################################################
##############################                                                ##############################
############################## I STOLE THESE FROM THE PRINTER.CFG FILE        ##############################
############################## THAT WAS INCLUDED WITH THE INITAL RELEASE OF   ##############################
############################## THE 3V3SE's ADDITION TO THE SONIC PAD VERSION  ##############################
############################## OF KLIPPER. I ASLO JACKED SOME OF THE CONFIG   ##############################
############################## DECLARATIONS AND USED THEM INSTEAD OF THE      ##############################
############################## ONES USED BY THE TWO GIT REPOS MOST USE. I     ##############################
############################## EDITED THEM TO FUNCTION WITH 3V3SE KLIP FORK.  ##############################
############################################################################################################
############################################################################################################



[gcode_macro M900] 
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro M204]
rename_existing: M204.1
gcode:
  # {% if printer['gcode_macro Qmode'].flag|int == 0 %}
  {% set get_params = "" %}
  {% if 'S' in params|upper %}
    {% set get_params = (get_params + ' ' + 'S' + params.S) %}
  {% endif %}
  {% if 'P' in params|upper %}
    {% set get_params = (get_params + ' ' + 'P' + params.P) %}
  {% endif %}
  {% if 'T' in params|upper %}
    {% set get_params = (get_params + ' ' + 'T' + params.T) %}
  {% endif %}
  M204.1 {get_params}
  # {% endif %}

[gcode_macro M205] #Velocity Sq Corners
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_arcs]

[gcode_macro INPUTSHAPER_X]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=x
  SAVE_CONFIG

[gcode_macro INPUTSHAPER_Y]
gcode:
  M84
  G90
  G28
  SHAPER_CALIBRATE AXIS=y
  SAVE_CONFIG
[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'mzv'
gcode:


[gcode_macro PRINTER_PARAM]
variable_max_x_position: 220.0
variable_max_y_position: 220.0
variable_max_z_position: 250.0
variable_z_safe_pause: 0.0
variable_G28_extruder_temp: 140
variable_fan0_min: 35
variable_z_safe_G28: 10.0
variable_fans: 1
gcode:

# [force_move]
#     enable_force_move: true

[gcode_macro xyz_ready]
variable_x_ready: 0
variable_y_ready: 0
variable_z_ready: 0
variable_x_moved: 0
variable_y_moved: 0
variable_z_moved: 0
variable_safe_z: 5
gcode:

[gcode_macro _IF_HOME_Z]
gcode:
  # BED_MESH_SET_DISABLE
  {% if printer['gcode_macro xyz_ready'].z_ready|int == 1 %}
    {% if printer.toolhead.position.z|int < 10 %}
      {% set z_park = 10.0 - printer.toolhead.position.z|int %}
      G91
      G1 z{z_park} F600
      G90
    {% endif %}
  {% else %}
    {% if printer['gcode_macro xyz_ready'].z_moved|int == 0 %}
      SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=z_moved VALUE=1
    {% endif %}
  {% endif %}

[gcode_macro _IF_MOVE_X]
gcode:
  # BED_MESH_SET_DISABLE
  {% if printer['gcode_macro xyz_ready'].x_moved|int == 0 %}
    {% if printer['gcode_macro xyz_ready'].y_moved|int == 0 %}
      {% set SAFE_Z = printer['gcode_macro xyz_ready'].safe_z|int%}
      FORCE_MOVE STEPPER=stepper_z DISTANCE={SAFE_Z} VELOCITY=20
    {% endif %}
    FORCE_MOVE STEPPER=stepper_x DISTANCE=10 VELOCITY=20
    SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=x_moved VALUE=1
  {% endif %}

[gcode_macro _IF_MOVE_Y]
gcode:
  # BED_MESH_SET_DISABLE
  {% if printer['gcode_macro xyz_ready'].y_moved|int == 0 %}
    {% if printer['gcode_macro xyz_ready'].x_moved|int == 0 %}
      {% set SAFE_Z =printer['gcode_macro xyz_ready'].safe_z|int%}
      FORCE_MOVE STEPPER=stepper_z DISTANCE={SAFE_Z} VELOCITY=20
    {% endif %}
    FORCE_MOVE STEPPER=stepper_y DISTANCE=10 VELOCITY=20
    SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=y_moved VALUE=1
  {% endif %}

[gcode_macro _HOME_X]
gcode:
   _IF_MOVE_X
  G28 X
  SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=x_ready VALUE=1
  G1 x10 F4800
  G28 x
  G91 X5 F2000
  G90
  # Wait just a second (give StallGuard registers time to clear)
  # G4 P2000

[gcode_macro _HOME_Y]
gcode:
   _IF_MOVE_Y
  # SET_TMC_FIELD FIELD=SGTHRS STEPPER=stepper_y VALUE=85
  G28 Y
  SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=y_ready VALUE=1
  G1 Y10 F4800
  G28 Y
  G91
  G1 y5 F2000
  G90
  # Wait just a second (give StallGuard registers time to clear)
  # G4 P2000

[gcode_macro _HOME_Z]
gcode:
  {% if printer['gcode_macro xyz_ready'].y_ready|int == 1 %}
    {% if printer['gcode_macro xyz_ready'].x_ready|int == 1 %}
      _IF_HOME_Z
    {% endif %}
  {% endif %}
  {% if printer['gcode_macro xyz_ready'].x_ready|int == 0 %}
    _HOME_X
  {% endif %}
  {% if printer['gcode_macro xyz_ready'].y_ready|int == 0 %}
    _HOME_Y
  {% endif %}
  G90
  {% set bl_offset = printer.configfile.settings['bltouch'] %}
  {% set x_park = printer['gcode_macro PRINTER_PARAM'].max_x_position/2 - bl_offset.x_offset %}
  {% set y_park = printer['gcode_macro PRINTER_PARAM'].max_y_position/2 - bl_offset.y_offset %}
  {action_respond_info("x_park = %s \n" % (x_park))}
  {action_respond_info("y_park = %s \n" % (y_park))}
  G1 x{x_park} y{y_park} F6000
  G4 P500 # P1000

  G28 Z
  SET_GCODE_VARIABLE MACRO=xyz_ready VARIABLE=z_ready VALUE=1
  G1 X110Y110Z5 F2400


#################################
#### calibr
#################################

[gcode_macro TEST_MOVEMENT_NOISE]
gcode:
    SAVE_GCODE_STATE NAME=TEST_MOVEMENT_NOISE
    G91
    {% set speeds = range(20, 100, 10) %} # speed in mm/s
    {% set distance = 100 %}
    G91

    {% for speed in speeds %}
        { action_respond_info("Testing speed %smm/s" % (speed)) }
        G1 X{distance} F{speed * 60}
        G1 X-{distance} F{speed * 60}
        G1 Y{distance} F{speed * 60}
        G1 Y-{distance} F{speed * 60}
        G1 X{distance} Y{distance} F{speed * 60}
        G1 X-{distance} Y-{distance} F{speed * 60}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=TEST_MOVEMENT_NOISE

[gcode_macro PID_EXTRUDER]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=210
  SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG

# [gcode_macro FILAMENT_LOAD]
# gcode:
#     {% set load = params.L|default(100)|float * 0.5 %}
#     {% set extruder_temp = params.T|default(210)|float %}
#     SAVE_GCODE_STATE NAME=FILAMENT_LOAD_STATE
#     LOW_TEMP_CHECK T={extruder_temp}
#     M118 Loading filament
#     M83                                                                         # relative extrusion
#     G1 E{load} F1500                                                            # extrude fast
#     G4 P1000                                                                    # wait 1 second
#     G1 E{load} F200                                                             # extrude slow
#     RESTORE_GCODE_STATE NAME=FILAMENT_LOAD_STATE
#     BEEP

# [gcode_macro FILAMENT_UNLOAD]
# gcode:
#     {% set unload = params.U|default(100)|float %}
#     {% set extruder_temp = params.T|default(200)|float %}
#     SAVE_GCODE_STATE NAME=FILAMENT_UNLOAD_STATE
#     LOW_TEMP_CHECK T={extruder_temp}
#     M118 Unloading filament
#     M83                                                                         # relative extrusion
#     G1 E2  F200                                                                 # extrude a little
#     G1 E-10  F200                                                               # retract a little
#     G1 E-{unload} F1500                                                         # retract a lot
#     RESTORE_GCODE_STATE NAME=FILAMENT_UNLOAD_STATE

[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set extruder_temp = params.T|default(200)|float %}
    {% if printer.extruder.target > extruder_temp %}                            # if there is a setpoint for extruder
        {% set extruder_temp = printer.extruder.target %}
    {% endif %}
    {% if printer.extruder.temperature < extruder_temp %}                       # heat to the target
        M118 Heating to {extruder_temp}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set duration = params.P|default(100)|float %}
    SET_PIN PIN=beeper VALUE=1
    G4 P{duration}
    SET_PIN PIN=beeper VALUE=0



# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
#   {% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
#   {% set retract = client.cancel_retract | default(5.0) | abs %}
#   ##### define park position #####
#   {% set park_x = "" if (client.park_at_cancel_x | default(none) is none)
#             else "X=" ~ client.park_at_cancel_x %}
#   {% set park_y = "" if (client.park_at_cancel_y | default(none) is none)
#             else "Y=" ~ client.park_at_cancel_y %}
#   {% set custom_park = park_x | length > 0 or park_y | length > 0 %}
#   ##### end of definitions #####
#   # restore idle_timeout time if needed
#   {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
#     SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
#   {% endif %}
#   {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
#   _CLIENT_RETRACT LENGTH={retract}
#   TURN_OFF_HEATERS
#   M106 S0
#   # clear pause_next_layer and pause_at_layer as preparation for next print
#   SET_PAUSE_NEXT_LAYER ENABLE=0
#   SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
#   CANCEL_PRINT_BASE

# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# variable_restore_idle_timeout: 0
# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
#   {% set idle_timeout = client.idle_timeout | default(0) %}
#   {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
#   {% set restore = printer.toolhead.extruder != '' and params.RESTORE | default(1) | int == 1 %}
#   ##### end of definitions #####
#   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
#   # set a new idle_timeout value
#   {% if idle_timeout > 0 %}
#     SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
#     SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
#   {% endif %}
#   PAUSE_BASE
#   _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

# # [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# variable_last_extruder_temp: {'restore': False, 'temp': 0}
# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
#   {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
#   {% set sp_move = client.speed_move | default(velocity) %}
#   ##### end of definitions #####
#   # restore idle_timeout time if needed
#   {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
#     SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
#   {% endif %}
#   {% if printer.idle_timeout.state | upper == "IDLE" and last_extruder_temp.restore %}
#     M109 S{last_extruder_temp.temp}
#   {% endif %}
#   _CLIENT_EXTRUDE
#   RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}

# # Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0 | 1]] [MACRO=<name>]
# [gcode_macro SET_PAUSE_NEXT_LAYER]
# description: Enable a pause if the next layer is reached
# gcode:
#   {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
#   {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
#   {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# # Usage: SET_PAUSE_AT_LAYER [ENABLE=[0 | 1]] [LAYER=<number>] [MACRO=<name>]
# [gcode_macro SET_PAUSE_AT_LAYER]
# description: Enable/disable a pause if a given layer number is reached
# gcode:
#   {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
#   {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
#              else params.LAYER is defined %}
#   {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
#   {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x | default(0.0) %}
  {% set custom_park_y  = client.custom_park_y | default(0.0) %}
  {% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
  {% set sp_hop         = client.speed_hop | default(15) * 60 %}
  {% set sp_move        = client.speed_move | default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z | default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN | default(0) | float %}
  {% set z_park = [[(act.z + park_dz), z_min] | max, (max.z - origin.z)] | min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed | float | abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_retract) | default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

# [gcode_macro PRINT_END]
# description: End of printing
# variable_machine_depth: 220
# gcode:
#       G91 ;Relative positioning
#       G1 E-2 F2700 ;Retract a bit
#       G1 E-2 Z0.2 F2400 ;Retract and raise Z
#       G1 X5 Y5 F3000 ;Wipe out
#       G1 z50 ;Raise Z more
#       G90 ;Absolute positioning
#       G1 X0 Y{machine_depth} ;Present print
#       M106 S0 ;Turn-off fan
#       M104 S0 ;Turn-off hotend
#       M140 S0 ;Turn-off bed
#       M84 X Y E ;Disable all steppers but Z
#       BEEP



######################################################################################################################
######################################################################################################################
##############################                                                          ##############################
##############################                        END THEFT                         ##############################
######################################################################################################################
######################################################################################################################


########################################################################################################################
##############################                                                            ##############################
##############################                PLUGINS AND ADDON MACROS                    ##############################
########################################################################################################################



################################
######### Buildplate stuff######
################################

[gcode_macro INSTALL_TEXTURED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="Textured PEI"

[gcode_macro INSTALL_SMOOTH_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="Smooth PEI"

#################################
#### Parking
#################################

[gcode_macro PARK_REAR]
gcode:
    SAVE_GCODE_STATE NAME=PARK_REAR
    ; park the head at the front of the printer
    G90
    G1 X150 Y300 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_REAR

[gcode_macro PARK_CENTER]
gcode:
    SAVE_GCODE_STATE NAME=PARK_CENTER
    ; park the head at the front of the printer
    G90
    G1 X150 Y100 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro PARK_FRONT]
gcode:
    SAVE_GCODE_STATE NAME=PARK_FRONT
    ; park the head at the front of the printer
    G90
    G1 X150 Y10 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_FRONT





[gcode_macro PA_CAL]
# Klipper pressure advance line calibration macro.
# Usage: PA_CAL BED=100 NOZZLE=240 PA_START=0.0 PA_STOP=0.1 NZL=0.4
# Or you can execute with no parameters, which will use values from printer.cfg and saved_variables.cfg.
# First prints a line with current set PA, then prints 21 additional line segments starting with PA_START, and increasing to PA_STOP.
# Based on http://realdeuce.github.io/Voron/PA/pressure_advance.html
# Cleaned up and moved to using saved_variables.cfg by u/jibbsisme
# Assisted by u/imoftendisgruntled, u/scul86, and thanks to u/beansisfat, u/stray_r

description: Tune Pressure Advance
gcode:
  # saved_variables.cfg
  {% set speed = printer.save_variables.variables.speed %}
  {% set nozzle_temp = printer.save_variables.variables.nozzle_temp %}
  {% set bed_temp = printer.save_variables.variables.bed_temp %}

  # macro parameters
  {% set BED = params.BED|default(bed_temp)|float %}
  {% set NOZZLE = params.NOZZLE|default(nozzle_temp)|float %}
  {% set PA_START = params.PA_START|default(0.0)|float %}
  {% set PA_STOP = params.PA_STOP|default(0.1)|float %}
  {% set NZL = params.NZL|default(printer.configfile.config["extruder"]["nozzle_diameter"])|float %}

  # calculated variables
  {% set PA_STEP = (PA_STOP - PA_START) / 20 |float %}
  {% set E20 = (0.1147475 * NZL) * 20|float %}
  {% set E40 = (0.1147475 * NZL) * 40|float %}
  {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
  {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}

  START_PRINT BED_TEMP={BED} NOZZLE_TEMP={NOZZLE}

  G21 ; millimeter units
  G90 ; absolute XYZ
  M83 ; relative E
  SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
  G92 E0
  M106 S0

  G1 X{(X_MID-40)} Y{(Y_MID-65)} F{speed}        ; move to start position
  G1 Z0.25 F300                                  ; move to layer height
  G1 E0.75 F1800                                 ; un-retract
  G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300     ; print line part one
  G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F3000    ; print line part two
  G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300     ; print line part three
  G1 E-0.75 F1800                                ; retract
  G1 Z1 F300                                     ; move above layer height

  {% for i in range(0, 21) %}
      SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)} ; set Pressure Advance
      M117 PA={PA_START + (i * PA_STEP)}, STEP={PA_STEP}.
      G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000           ; move to start position
      G1 Z0.25 F300                                         ; move to layer height
      G1 E0.75 F1800                                        ; un-retract
      G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part one
      G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F3000     ; print line part two
      G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part three
      G1 E-0.75 F1800                                       ; retract
      G1 Z1 F300                                            ; move above layer height
  {% endfor %}

  END_PRINT

  # these may not work, in which case you will need to count and do the math yourself!
  M117 New PA = ({PA_START} + (bestLine * {PA_STEP}) )
  {action_respond_info ("Find best line and multiply it by (" + PA_START|string + " + (bestLine * " + PA_STEP|string + ") ) to find your PA setting.")}
